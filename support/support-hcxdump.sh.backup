#!/bin/bash
scripts_dir=/opt/easy-linux
#install and use hcxtools w hashcat and jack
#
#set -e
#
# trap ${scripts_dir}/support/support-trap-wifi.sh EXIT
source ${scripts_dir}/.envrc
# Version: 0.0.4
#

ripper_func() {
read -n 1 -r -p "Made it another step. Any key to continue" madeit
clear
printf "\\n"
#The --filterlist and --filtermode options are used to apply a whitelist filter to only capture traffic from the desired access point. The --disable_client_attacks option is used to avoid sending deauthentication packets to connected clients.

# Prompt the user to choose between John the Ripper and Hashcat
source ${scripts_dir}/support/support-Banner_func.sh
printf "\\n"
printf "${OG}1] ${CY}John the Ripper\\n"
printf "${OG}2] ${CY}Hashcat\\n"
printf "\\n"
printf "$CY  Choose a tool for cracking the hash [1/2] ${GN}----> ${OG}\\n"
printf "\\n"
read -n 1 -r ripperchoice
ripperchoice=${ripperchoice:-2}

# Capture the hashes with hcxdumptool

if [[ ${ripperchoice} -eq 1 ]]; then
	# Crack the hash with John the Ripper using the OneRuleToRuleThemAll.rule
	john --wordlist=${WORDLIST} --rules="${RULES}" --stdout | aircrack-ng -w - -e SSID /opt/backup/root/handshakes/hashes.22000 -J /opt/backup/root/handshakes/mypots.potfile
elif [[ "${ripperchoice}" -eq 2 ]]; then
	# Crack the hash with hashcat
	#  hashcat -m 22000 -a 1 -w 4 -o /opt/backup/root/handshakes/cracked.txt --force --opencl-device-types=1,2 ${WORDLIST} ?d?d?d?d?d?d?d?d?d --increment-min=8 --rule-file=OneRuleToRuleThemAll.rule /opt/backup/root/handshakes/hashes.22000
	hashcat -m 22000 -a 3 -w 4 -o /opt/backup/root/handshakes/mypots.potfile --force --opencl-device-types=1,2 ${WORDLIST} /opt/backup/root/handshakes/hashes.22000 --increment --increment-min=8 --increment-max=13

else
	# Invalid choice
	printf "${RED}  Invalid choice. Exiting..."
	exit 1
fi

#First, capture the hashes with hcxdumptool and save them to a file
#hcxdumptool -o /opt/backup/root/handshakes/hashes.pcapng -i ${adapter} --enable_status=1

# Convert the pcapng file to a format that hashcat or john the ripper can use
#sudo /usr/bin/hcxpcapngtool -E essidlist -I identitylist -U usernamelist -z hashfile hashes.pcapng

# Now you can use hashcat or john the ripper to crack the captured hashes
# The example below shows how to use hashcat with a wordlist attack
#hashcat -m 22000 -a 0 -o cracked.txt --force --opencl-device-types=1,2 --remove --rule-file=OneRuleToRuleThemAll.rule --pw-min=8 --pw-max=13 hashfile ${WORDLIST}
#hashcat -m 22000 -a 1 -w 4 -o /opt/backup/root/handshakes/cracked.txt --force --opencl-device-types=1,2 $WORDLIST ?d?d?d?d?d?d?d?d?d --increment-min=8 /opt/backup/root/handshakes/hashes.22000

# Clean up the hash file
rm /opt/easy-linux/support/misc/hashes.22000
}


Test_func() {
	clear
	source ${scripts_dir}/support/support-Banner_func.sh
	printf "${OG}             What test do you want to run?\\n"
	printf "  \\n"
	printf "   ${OG}1] ${CY}Injection Test - Test your network adapters packet injection abilities.\\n"
	printf "   ${OG}2] ${CY}Driver Test - Runs several tests to determine if the driver supports all IOCTL calls. \\n"
	printf "   \\n"
	printf "   ${OG}99] ${CY}Return to the main menu.                       ${RED} [✘] Exit tool [✘]\"${CY}\" \\n "
	read -n 1 -r -p "Which test?" test
	clear
	source ${scripts_dir}/support/support-Banner_func.sh

	if [[ ${test} = 1 ]]; then
		sudo systemctl stop NetworkManager
		sudo systemctl stop wpa_supplicant
		sudo hcxdumptool --check_injection -i "${adapter}"
	elif [[ ${test} = 2 ]]; then
		sudo systemctl stop NetworkManager
		sudo systemctl stop wpa_supplicant
		sudo hcxdumptool --check_driver -i "${adapter}"
	elif [[ ${test} = 99 ]]; then
		source ${scripts_dir}/install/menu-master.sh
	elif [[ ${test} = "x" ]] || [[ ${test} = "X" ]]; then
		clear
		printf "    ${RED}0. [✘] Exit tool [✘]${NC} \\n"
		exit 0
	else
		printf "${RED}  Invalid Selection${NC}\\n"
	fi
}

#
choice_func() {
clear
printf "${OG}   \\n"
source ${scripts_dir}/support/support-Banner_func.sh

printf "Stopping problem processes. Please wait...  \\n "
printf "  Continuing in${WT}"; sleep 1; printf " 3..${YW}"; sleep 1; printf " 2..${GN}"; sleep 1; printf " 1..${CY}  \\n"; sleep 1

sudo systemctl stop NetworkManager && sudo systemctl stop wpa_supplicant
echo
printf " \\n${WT}"
printf "  ${CY}Press ${WT}[S] ${CY}to scan...Please ${RED}do not interupt for 30 sec ${CY}scan...${OG}\\n"
echo
printf "  Scan will stop automagically when complete...\\n${WT}   "
printf "${GN} \\n"
printf "  Press ${WT}[T]${GN}est to test adapters or ${WT}[S]${GN}can to scan AP's.${WT} \\n     "
read -n 1 -r -p "[T]est or [S]can [t/S] ----> " torscan
torscan=${torscan:-S}
if [[ "${torscan}" = "T" ]] || [[ "${torscan}" = "t" ]]; then
	Test_func
elif [[ "${torscan}" = "S" ]] || [[ "${torscan}" = "s" ]]; then
    printf " \\n"

    if (ls /opt/easy-linux/support/misc2/hcxdumptool* >/dev/null 2>&1) || (ls /opt/easy-linux/support/misc2/allhcxdumps*); then
        cd ${scripts_dir}/support/misc2 || exit
        printf "${OG}  Hcxdump files exist in your misc2/ directory. Using them.\\n"; sleep 3
            
                 sleep 3
          sudo chown -vR $USER:0 ${scripts_dir}/support/misc2
    sudo /usr/bin/hcxpcapngtool -o ${scripts_dir}/support/misc2/*.pcapng*
 
    rm -f ./*pcapng*
    read -n 1 -p "Done with hcxpcapng. Files deleted."
    ripper_func
              fi
    else
        # Code to execute when the files dont exist
    printf "${OG}  You have selected scan. The next step will take 30 secs.\\n"
    printf "${OG}  Do ${WT}NOT ${OG}interupt until scan has completed.\\n  " 
    read -n 1 -r -p "Press any key to continue." anykey
    printf "\\n"
	source ${scripts_dir}/support/support-hcxdump2.sh
    sleep 120
    printf "\\n  ${GN}Success. Hcxdump files have been joined. \\n"
    sleep 120
    fi
    

fi

}

main() {
source ${scripts_dir}/support/support-netadapter.sh
choice_func
ripper_func
}

main
sleep 1
#clear
printf "    ${OG}Restarting NetworkManager and wpa_supplicant..."
sudo systemctl start NetworkManager
sudo systemctl start wpa_supplicant
